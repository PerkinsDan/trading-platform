"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2123],{2668:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"Apps/OrderProcessor/Order","title":"Order","description":"Filename: Order.java","source":"@site/docs/Apps/OrderProcessor/Order.md","sourceDirName":"Apps/OrderProcessor","slug":"/Apps/OrderProcessor/Order","permalink":"/docs/Apps/OrderProcessor/Order","draft":false,"unlisted":false,"editUrl":"https://github.com/PerkinsDan/trading-platform/tree/main/documentation/docs/docs/Apps/OrderProcessor/Order.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"MatchingEngine","permalink":"/docs/Apps/OrderProcessor/MatchingEngine"},"next":{"title":"OrderComparator","permalink":"/docs/Apps/OrderProcessor/OrderComparator"}}');var t=s(4848),i=s(8453);const d={},o="Order",c={},l=[{value:"What is it?",id:"what-is-it",level:2},{value:"When do we use it?",id:"when-do-we-use-it",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Methods",id:"methods",level:2}];function a(e){const r={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"order",children:"Order"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Filename"}),": ",(0,t.jsx)(r.code,{children:"Order.java"})]}),"\n",(0,t.jsx)(r.h2,{id:"what-is-it",children:"What is it?"}),"\n",(0,t.jsxs)(r.p,{children:["An ",(0,t.jsx)(r.code,{children:"Order"})," represents an intention to buy or sell a specific amount of a specific stock at a specific price.",(0,t.jsx)(r.br,{}),"\n","The ",(0,t.jsx)(r.code,{children:"Order"})," class is the Data Model Object (DMO) used to represent the intent of an agent to engage in a trade.",(0,t.jsx)(r.br,{}),"\n","Each ",(0,t.jsx)(r.code,{children:"Order"})," object represents one side of a trade (i.e., there is an ",(0,t.jsx)(r.code,{children:"Order"}),' object for both the buy and sell sides of a trade) and is treated as an individual entity rather than as part of a "trade."']}),"\n",(0,t.jsx)(r.h2,{id:"when-do-we-use-it",children:"When do we use it?"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["An ",(0,t.jsx)(r.code,{children:"Order"})," object is created when an order is placed."]}),"\n",(0,t.jsx)(r.li,{children:"It is persisted in the database while it is processed."}),"\n",(0,t.jsx)(r.li,{children:'Upon being filled, it is marked as "filled" and warehoused in case it is needed for reference or regulatory reporting.'}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"attributes",children:"Attributes"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"orderId"})}),": A UUID used to identify the order through its lifetime, generated on instantiation."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"type"})}),": ",(0,t.jsx)(r.code,{children:"BUY"})," or ",(0,t.jsx)(r.code,{children:"SELL"}),", determined by the user."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"price"})}),": The price at which the order is to be executed, determined by the user."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"timestamp"})}),": The time at which the order was submitted."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"ticker"})}),": A symbol representing which stock the user is interested in buying or selling."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"quantity"})}),": The amount of stock that the user wants to buy or sell."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"cancelled"})}),": ",(0,t.jsx)(r.code,{children:"false"})," by default, only changed if a cancellation request is submitted."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"filled"})}),": ",(0,t.jsx)(r.code,{children:"false"})," by default, only changed when an order has been completely filled."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"userId"})}),": Used to assign each order to a specific user."]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Getters"}),": For the various attributes."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"reduceQuantity(int amount)"})}),": Decreases the ",(0,t.jsx)(r.code,{children:"quantity"})," attribute of the order."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"toString()"})}),": Useful for logging, displays attributes in dictionary format."]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>d,x:()=>o});var n=s(6540);const t={},i=n.createContext(t);function d(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);